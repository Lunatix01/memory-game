Deploying a React project with a server-side component to a hosting site involves a few steps. Here's a detailed guide on how to deploy your project:

1. Build your React client-side code
First, you need to build your React client-side code into a production-ready bundle. To do this, open a terminal in the root directory of your project and run the following command:

npm run build
This command will create an optimized and minified version of your React code in a build folder.

2. Prepare your server-side code
Next, make sure your server-side code is ready for deployment. This typically involves ensuring that all required dependencies are listed in your package.json file and that any environment variables required for your server to run are properly set up.

3. Choose a hosting provider
Choose a hosting provider that supports Node.js applications and PostgreSQL databases. Some popular options include Heroku, AWS, and DigitalOcean. For the purpose of this guide, we'll use Heroku.

4. Set up a hosting account
Sign up for a hosting account with your chosen provider and follow their instructions to set up your account.

5. Install the hosting provider's CLI tool
Most hosting providers offer a command-line interface (CLI) tool that simplifies the deployment process. Install the CLI tool by following the instructions provided by your hosting provider.

6. Initialize a Git repository
Initialize a Git repository in the root directory of your project if you haven't already done so. This will allow you to easily deploy your project using Git.

git init
7. Create a Gitignore file
Create a file named .gitignore in the root directory of your project (if it doesn't already exist) and add the following lines to it:

/node_modules
/build
This will ensure that the node_modules directory (where your dependencies are stored) and the build directory (where your client-side code is built) are not included in your Git repository.

8. Commit your code
Commit your code to the Git repository:

git add .
git commit -m "Initial commit"
9. Connect your project to the hosting provider
Use the hosting provider's CLI tool to connect your project to your hosting account. For example, if you're using Heroku, you can use the following command:

heroku login
This will open a browser window where you can log in to your Heroku account.

10. Create a new app
Create a new app on your hosting provider's platform. For example, on Heroku, you can use the following command:

heroku create
This will generate a unique URL for your app.

11. Set up environment variables
If your server-side code requires any environment variables, set them up on your hosting provider's platform. This is typically done through a web interface or the CLI tool provided by your hosting provider.

12. Deploy your code
Deploy your code to the hosting provider using the CLI tool. For example, on Heroku, you can use the following command:

git push heroku master
This will push your code to the Heroku remote repository and trigger the deployment process.

13. Set up PostgreSQL database
If your project requires a PostgreSQL database, set it up using your hosting provider's documentation. You'll need to create a new database and configure your server-side code to connect to it.

14. Start your server
Once your code is deployed, start your server using the hosting provider's CLI tool. For example, on Heroku, you can use the following command:

heroku ps:scale web=1
This will start your server and make it accessible over the internet.

15. Visit your deployed app
Finally, visit the URL provided by your hosting provider to see your deployed app in action!

These steps should guide you through the process of deploying your React project with a server-side component to a hosting site. Remember to consult your hosting provider's documentation for specific instructions and best practices.